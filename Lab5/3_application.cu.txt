#include <stdio.h>
#include <iostream>
#include <stdlib.h>

__global__ void application(int *2_D, int *d_price, int *d_out) {
	
	__shared__ int tmp[4][7];
	int i = threadIdx.x;
	int j = blockIdx.x;
	tmp[j][i] = 2_D[j][i] * d_price[j];
	__syncthreads();

	if (i==0 && j==0) {
		for (int x=0; x<7; x++) {
			for (int y=0; y<4; y++) {
				d_out[x] = d_out[x] + tmp[y][x];
			}
		}
	}
}

void print_output(float *d_c, int N) {
	printf("\nOutput:");
	for (int idx=0; idx<N; idx++) {
		printf(" %d ", d_c[0]);
	}
	printf("\n");
}

int main(void) {	
	int M = 4;
	int N = 7;
	float price[M] = {29.99, 14.99, 9.99, 24.99};
	int _2D[M][N] = {
		{3, 2, 0, 3, 4, 10, 8},
		{5, 4, 3, 5, 5, 13, 11},
		{2, 5, 3, 4, 5, 21, 15},
		{0, 1, 1, 4, 3, 16, 8}
	};
	float out[N];

	int *2_D, *d_out, *d_price;

	cudaMalloc((void**) &2_D, sizeof(int)*M*N);
	cudaMalloc((void**) &d_out, sizeof(float)*N);
	cudaMalloc((void**) &d_price, sizeof(float)*M);

	cudaMemcpy(2_D, _2D, sizeof(int)*M*N, cudaMemcpyHostToDevice);
	cudaMemcpy(d_out, out, sizeof(float)*N, cudaMemcpyHostToDevice);
	cudaMemcpy(d_price, price, sizeof(float)*M, cudaMemcpyHostToDevice);

	application<<<4,7>>>(2_D, d_price, d_out); 

	cudaMemcpy(out, d_out, sizeof(float)*N, cudaMemcpyDeviceToHost);

	print_output(out, N);

	//cudaFree(2_D);
	cudaFree(d_out);
	cudaFree(d_price);

	return 0;
}
// to compile: nvcc file_name.cu -o filename 
// to run: ./filename